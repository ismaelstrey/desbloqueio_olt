generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Empresa: Cadastro da empresa que possui as OLTs
model Empresa {
    id        Int      @id @default(autoincrement())
    nome      String
    cnpj      String   @unique
    email     String
    telefone  String
    endereco  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    olts      Olt[]
    tickets   Ticket[]
}

// OLT: Equipamentos que serão atualizados ou desbloqueados
model Olt {
    id           Int      @id @default(autoincrement())
    empresaId    Int
    nome         String
    marca        String
    modelo       String
    tipo         TipoOlt
    firmware     String
    firmwareTipo String
    ipAcesso     String?
    usuario      String?
    senha        String?
    localizacao  String?
    observacoes  String?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    empresa      Empresa  @relation(fields: [empresaId], references: [id])
    tickets      Ticket[]
}

// Ticket: Ordem de serviço associada a uma OLT
model Ticket {
    id              Int             @id @default(autoincrement())
    empresaId       Int
    oltId           Int
    titulo          String
    descricao       String
    tipoServico     TipoServico
    status          StatusTicket
    valorServico    Float // <- valor do serviço
    statusPagamento StatusPagamento // <- pago, pendente, cancelado
    tipoPagamento   TipoPagamento? // <- qual tipo (Pix, Boleto, etc) (opcional até ser pago)
    dataSolicitacao DateTime        @default(now())
    dataConclusao   DateTime?
    criadoPor       String
    resolvidoPor    String?
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    empresa         Empresa         @relation(fields: [empresaId], references: [id])
    olt             Olt             @relation(fields: [oltId], references: [id])
}

// Tipos de OLT
enum TipoOlt {
    GPON
    EPON
}

// Tipos de Serviço
enum TipoServico {
    Atualizacao
    Desbloqueio
    AtualizacaoEDesbloqueio
}

// Status do Ticket
enum StatusTicket {
    Aberto
    EmAndamento
    Finalizado
    Cancelado
}

// Status de Pagamento
enum StatusPagamento {
    Pendente
    Pago
    Cancelado
}

// Tipos de Pagamento
enum TipoPagamento {
    Pix
    Boleto
    Dinheiro
    CartaoCredito
    CartaoDebito
}
